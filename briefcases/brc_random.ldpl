# +------------------------------------------+
# | LDPL STANDARD LIBRARY - RANDOM BRIEFCASE |
# +------------------------------------------+
#
# +-------------+
# | Description |
# +-------------+
# This library includes STATEMENTS with utilities about random number generation.
#
# +------------------------------+
# | STATEMENTS in this briefcase |
# +------------------------------+
# * STORE RANDOM BETWEEN $ AND $ IN $
# * STORE RANDOM INTEGER BETWEEN $ AND $ IN $
# * GET RANDOM ELEMENT FROM LIST $ IN $
# * SHUFFLE LIST $
#
# +-----------------------------+
# | Included STATEMENTS details |
# +-----------------------------+
# * STORE RANDOM BETWEEN $ AND $ IN $
#    | Takes three numbers and stores a random number between the first (inclusive) and the second (noninclusive) in the third.
#    | Complexity: O(1)
# * STORE RANDOM INTEGER BETWEEN $ AND $ IN $
#    | Takes three numbers and stores a random integer between the first and the second (both inclusive) in the third.
#    | Complexity: O(1)
# * GET RANDOM ELEMENT FROM LIST $ IN $
#    | Takes a list and a varible of its type and stores a random element of the list in the variable.
#    | Complexity: O(1)
# * SHUFFLE LIST $
#    | Takes a list and stores a random permutation in it.
#    | Complexity: O(n)

procedure:
# Takes two numbers and a number variable and stores a random number between the first (inclusive) and the second (noninclusive) in the variable.
# Complexity: O(1)
sub-procedure std.randomBetween
    parameters:
        a is number
        b is number
        res is number
    procedure:
        store random in res
        in res solve a + res * (b - a)
end sub-procedure
create statement "STORE RANDOM BETWEEN $ AND $ IN $" executing std.randomBetween

# Takes three numbers and stores a random integer between the first and the second (both inclusive) in the third.
# Complexity: O(1)
sub-procedure std.randomIntBetween
    parameters:
        a is number
        b is number
        res is number
    local data:
        aInt is number
        bInt is number
    procedure:
        store a in aInt
        store b in bInt
        ceil aInt
        floor bInt
        incr bInt
        store random between aInt and bInt in res
        floor res
end sub-procedure
create statement "STORE RANDOM INTEGER BETWEEN $ AND $ IN $" executing std.randomIntBetween

# Takes a number list and a number varible and stores a random element of the list in the variable.
# Complexity: O(1)
sub-procedure std.getRandomNElement
    parameters:
        list is number list
        randomElement is number
    local data:
        listLength is number
        randomIndex is number
    procedure:
        store length of list in listLength
        if listLength is equal to 0 then
            display "Standard Library Error: cannot get an random element from an empty list." crlf
            exit
        end if
        decr listLength
        store random integer between 0 and listLength in randomIndex
        store list:randomIndex in randomElement
end sub-procedure
create statement "GET RANDOM ELEMENT FROM LIST $ IN $" executing std.getRandomNElement

# Takes a text list and a text varible and stores a random element of the list in the variable.
# Complexity: O(1)
sub-procedure std.getRandomTElement
    parameters:
        list is text list
        randomElement is text
    local data:
        listLength is number
        randomIndex is number
    procedure:
        store length of list in listLength
        if listLength is equal to 0 then
            display "Standard Library Error: cannot get an random element from an empty list." crlf
            exit
        end if
        decr listLength
        store random integer between 0 and listLength in randomIndex
        store list:randomIndex in randomElement
end sub-procedure
create statement "GET RANDOM ELEMENT FROM LIST $ IN $" executing std.getRandomTElement

# Takes a number list and stores a random permutation in it.
# Complexity: O(n)
sub-procedure std.suffleNList
    parameters:
        list is number list
    local data:
        listLength is number
        i is number
        randomIndex is number
        swapAux is number
    procedure:
        # Fisher–Yates Shuffle
        store length of list in listLength
        decr listLength
        for i from listLength to -1 step -1 do
            store random integer between 0 and i in randomIndex
            store list:i in swapAux
            store list:randomIndex in list:i
            store swapAux in list:randomIndex
        repeat
end sub-procedure
create statement "SHUFFLE LIST $" executing std.suffleNList

# Takes a text list and stores a random permutation in it.
# Complexity: O(n)
sub-procedure std.suffleTList
    parameters:
        list is text list
    local data:
        listLength is number
        i is number
        randomIndex is number
        swapAux is text
    procedure:
        # Fisher–Yates Shuffle
        store length of list in listLength
        decr listLength
        for i from listLength to 0 step -1 do
            store random integer between 0 and i in randomIndex
            store list:i in swapAux
            store list:randomIndex in list:i
            store swapAux in list:randomIndex
        repeat
end sub-procedure
create statement "SHUFFLE LIST $" executing std.suffleTList
