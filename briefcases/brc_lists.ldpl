# +-----------------------------------------+
# | LDPL STANDARD LIBRARY - LISTS BRIEFCASE |
# +-----------------------------------------+
#
# +-------------+
# | Description |
# +-------------+
# This library includes STATEMENTS to work with lists.
#
# +------------------------------+
# | STATEMENTS in this briefcase |
# +------------------------------+
# * DISPLAY LIST $
# * SORT LIST $ ASCENDING
# * SORT LIST $ DESCENDING
# * APPEND LIST $ TO LIST $
# * SPLICE ELEMENT $ OF LIST $
# * FLIP LIST $
#
# +-----------------------------+
# | Included STATEMENTS details |
# +-----------------------------+
# * DISPLAY LIST $
#    | Takes a number list or a text list and displays it.
#    | Complexity: O(n)
# * SORT LIST $ ASCENDING
#    | Takes a number list and sorts it in ascending order.
#    | Complexity: O(n²)
# * SORT LIST $ DESCENDING
#    | Takes a number list and sorts it in descending order.
#    | Complexity: O(n²)
# * APPEND LIST $ TO LIST $
#    | Takes a two lists of the same type and appends the former to the later.
#    | Complexity: O(n) with n the length of the second list.
# * SPLICE ELEMENT $ OF LIST $
#    | Takes an index and a list and removes the element at the given index from the list.
#    | Complexity: O(n)
# * FLIP LIST $
#    | Takes a list and inverts the order of its elements.
#    | Complexity: O(n)

procedure:
# Takes a number list and displays it.
# Complexity O(n)
sub-procedure std.displayNList
    parameters:
        listToPrint is number list
    local data:
        listLength is number
        i is number
    procedure:
        display "["
        get length of listToPrint in listLength
        for i from 0 to listLength step 1 do
            display listToPrint:i
            in listLength solve listLength - 1
            if i is less than listLength then
                display ", "
            end if
            in listLength solve listLength + 1
        repeat
        display "]" crlf
end sub-procedure
create statement "DISPLAY LIST $" executing std.displayNList

# Takes a text list and displays it.
# Complexity O(n)
sub-procedure std.displayTList
    parameters:
        listToPrint is text list
    local data:
        listLength is number
        i is number
    procedure:
        display "["
        get length of listToPrint in listLength
        for i from 0 to listLength step 1 do
            display listToPrint:i
            in listLength solve listLength - 1
            if i is less than listLength then
                display ", "
            end if
            in listLength solve listLength + 1
        repeat
        display "]" crlf
end sub-procedure
create statement "DISPLAY LIST $" executing std.displayTList

# Takes a number list and sorts it in ascending order.
# Complexity O(n²)
sub-procedure std.sortNListAsc
    parameters:
        listToSort is number list
    local data:
        listLength is number
        listLength-1 is number
        i is number
        j is number
        swap is number
    procedure:
        get length of listToSort in listLength
        in listLength-1 solve listLength - 1

        for i from 0 to listLength-1 step 1 do
            for j from 1 to listLength step 1 do
                if listToSort:j is less than listToSort:i then
                    store listToSort:i in swap
                    store listToSort:j in listToSort:i
                    store swap in listToSort:j
                end if
            repeat
        repeat
end sub-procedure
create statement "SORT LIST $ ASCENDING" executing std.sortNListAsc

# Takes a number list and sorts it in descending order.
# Complexity O(n²)
sub-procedure std.sortNListDesc
    parameters:
        listToSort is number list
    local data:
        listLength is number
        listLength-1 is number
        i is number
        j is number
        swap is number
    procedure:
        get length of listToSort in listLength
        in listLength-1 solve listLength - 1

        for i from 0 to listLength-1 step 1 do
            for j from 1 to listLength step 1 do
                if listToSort:j is greater than listToSort:i then
                    store listToSort:i in swap
                    store listToSort:j in listToSort:i
                    store swap in listToSort:j
                end if
            repeat
        repeat
end sub-procedure
create statement "SORT LIST $ DESCENDING" executing std.sortNListDesc

# Takes a two number lists and appends the former to the later.
# Complexity O(n) with n the length of the second list.
sub-procedure std.appendNList
    parameters:
        secondList is number list
        firstList is number list
    local data:
        i is number
    procedure:
        for each i in secondList do
            push i to firstList
        repeat
end sub-procedure
create statement "APPEND LIST $ TO LIST $" executing std.appendNList

# Takes a two text lists and appends the former to the later.
# Complexity O(n) with n the length of the second list.
sub-procedure std.appendTList
    parameters:
        secondList is text list
        firstList is text list
    local data:
        i is text
    procedure:
        for each i in secondList do
            push i to firstList
        repeat
end sub-procedure
create statement "APPEND LIST $ TO LIST $" executing std.appendTList

# Takes a number list and an index and removes the element
# at the given index from the list.
# Complexity O(n)
sub-procedure std.spliceNList
    parameters:
        indexToSplice is number
        listToSplice is number list
    local data:
        listLength is number
        i is number
        newList is number list
    procedure:
        get length of listToSplice in listLength
        for i from 0 to listLength step 1 do
            if i is not equal to indexToSplice then
                push listToSplice:i to newList
            end if
        repeat
        copy newList to listToSplice
end sub-procedure
create statement "SPLICE ELEMENT $ OF LIST $" executing std.spliceNList

# Takes a text list and an index and removes the element
# at the given index from the list.
# Complexity O(n)
sub-procedure std.spliceTList
    parameters:
        indexToSplice is number
        listToSplice is text list
    local data:
        listLength is number
        i is number
        newList is text list
    procedure:
        get length of listToSplice in listLength
        for i from 0 to listLength step 1 do
            if i is not equal to indexToSplice then
                push listToSplice:i to newList
            end if
        repeat
        copy newList to listToSplice
end sub-procedure
create statement "SPLICE ELEMENT $ OF LIST $" executing std.spliceTList

# Takes a number list and inverts the order of its elements.
# Complexity O(n)
sub-procedure std.reverseNList
    parameters:
        listToReverse is number list
    local data:
        left is number
        right is number
        swapAux is number
    procedure:
        get length of listToReverse in right
        in right solve right - 1
        while left is less than right do
            store listToReverse:left in swapAux
            store listToReverse:right in listToReverse:left
            store swapAux in listToReverse:right
            in left solve left + 1
            in right solve right - 1
        repeat
end sub-procedure
create statement "FLIP LIST $" executing std.reverseNList

# Takes a text list and inverts the order of its elements.
# Complexity O(n)
sub-procedure std.reverseTList
    parameters:
        listToReverse is text list
    local data:
        left is number
        right is number
        swapAux is text
    procedure:
        get length of listToReverse in right
        in right solve right - 1
        while left is less than right do
            store listToReverse:left in swapAux
            store listToReverse:right in listToReverse:left
            store swapAux in listToReverse:right
            in left solve left + 1
            in right solve right - 1
        repeat
end sub-procedure
create statement "FLIP LIST $" executing std.reverseTList
